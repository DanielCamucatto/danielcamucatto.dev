# ==============================================================================
#  Ajuda e Informa√ß√µes
# ==============================================================================

# Exibe a lista de comandos dispon√≠veis
help:
	@echo "üì¶ Comandos dispon√≠veis no Makefile:"
	@echo ""
	@echo "üöÄ Desenvolvimento:"
	@echo "  make dev          - Inicia cont√™ineres em modo desenvolvimento"
	@echo "  make build-dev    - Constr√≥i e inicia cont√™ineres de desenvolvimento" 
	@echo "  make stop-dev     - Para os cont√™ineres de desenvolvimento"
	@echo "  make logs-dev     - Exibe logs dos cont√™ineres de desenvolvimento"
	@echo ""
	@echo "üè≠ Produ√ß√£o:"
	@echo "  make build-prod   - Constr√≥i imagens para produ√ß√£o"
	@echo "  make prod         - Inicia cont√™ineres de produ√ß√£o"
	@echo "  make stop-prod    - Para os cont√™ineres de produ√ß√£o"
	@echo "  make logs-prod    - Exibe logs dos cont√™ineres de produ√ß√£o"
	@echo ""
	@echo "üß™ Testes:"
	@echo "  make test         - Executa todos os testes"
	@echo "  make test-watch   - Executa testes em modo watch"
	@echo "  make coverage     - Gera relat√≥rio de cobertura de testes"
	@echo "  make snapshots    - Atualiza snapshots dos testes"
	@echo ""
	@echo "‚ú® Qualidade de C√≥digo:"
	@echo "  make lint         - Executa ESLint"
	@echo "  make typecheck    - Executa verifica√ß√£o de tipos TypeScript"
	@echo "  make codequality  - Executa lint + typecheck"
	@echo ""  
	@echo "üéØ Pipeline:"
	@echo "  make ci           - Executa toda a pipeline (qualidade + testes)"
	@echo ""
	@echo "‚ùì Ajuda:"
	@echo "  make help         - Exibe esta ajuda"

# ==============================================================================
#  Comandos para o Ambiente de Desenvolvimento
# ==============================================================================

# Inicia os cont√™ineres de desenvolvimento em modo detached (-d)
dev:
	docker compose -f docker-compose.dev.yml up -d

# Constr√≥i e inicia os cont√™ineres de desenvolvimento
build-dev:
	docker compose -f docker-compose.dev.yml up -d --build

# Para os cont√™ineres de desenvolvimento
stop-dev:
	docker compose -f docker-compose.dev.yml down

# Exibe e acompanha os logs dos cont√™ineres de desenvolvimento
logs-dev:
	docker compose -f docker-compose.dev.yml logs -f

# ==============================================================================
#  Comandos para o Ambiente de Produ√ß√£o
# ==============================================================================

# Constr√≥i as imagens para produ√ß√£o
build-prod:
	docker compose build

# Inicia os cont√™ineres de produ√ß√£o em modo detached (-d)
prod:
	docker compose up -d

# Para os cont√™ineres de produ√ß√£o
stop-prod:
	docker compose down

# Exibe e acompanha os logs dos cont√™ineres de produ√ß√£o
logs-prod:
	docker compose logs -f



# ==============================================================================
#  Code Quality
# ==============================================================================

# Executa ESLint para verificar qualidade do c√≥digo
lint:
	docker compose -f docker-compose.dev.yml exec frontend npm run lint

# Executa verifica√ß√£o de tipos TypeScript
typecheck:
	docker compose -f docker-compose.dev.yml exec frontend npm run test:typecheck

# Executa todas as verifica√ß√µes de qualidade de c√≥digo
codequality: lint typecheck
	@echo "‚úÖ Todas as verifica√ß√µes de qualidade passaram!"

# ==============================================================================
#  Testes
# ==============================================================================

# Executa todos os testes
test:
	docker compose -f docker-compose.dev.yml exec frontend npx jest --passWithNoTests

# Gera relat√≥rio de cobertura de testes
coverage:
	docker compose -f docker-compose.dev.yml exec frontend npx jest --coverage

# Atualiza snapshots dos testes
snapshots:
	docker compose -f docker-compose.dev.yml exec frontend npx jest --updateSnapshot

# Executa testes em modo watch (desenvolvimento)
test-watch:
	docker compose -f docker-compose.dev.yml exec frontend npx jest --watch

# ==============================================================================
#  Comandos Combinados
# ==============================================================================

# Executa todos os testes de qualidade e testes unit√°rios
ci: codequality test
	@echo "üéâ Pipeline de CI passou com sucesso!"

# Define o target padr√£o
.DEFAULT_GOAL := help

# Declara que os targets n√£o s√£o arquivos para evitar conflitos
.PHONY: help dev build-dev stop-dev logs-dev build-prod prod stop-prod logs-prod lint typecheck codequality test coverage snapshots test-watch ci
